/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface SiclButton {
        "disabled": boolean;
        "form"?: string;
        "iconLeft"?: string;
        "iconRight"?: string;
        "name"?: string;
        "type": string;
        "variant": 'primary' | 'secondary' | 'tertiary' | 'danger';
    }
    interface SiclCheckbox {
        "checked": boolean;
        "disabled": boolean;
        "formAssociated": boolean;
        "indeterminate": boolean;
        "inputId": string;
        "labelText"?: string;
        "name": string;
        "required": boolean;
        "value": string;
    }
    interface SiclCheckboxGroup {
        "disabled": boolean;
        "labelText": string;
        "name": string;
        "value": string;
    }
    interface SiclIcon {
        "name": string;
        "size": string | '1em';
    }
    interface SiclInput {
        "disabled": boolean;
        "formAssociated": boolean;
        "iconLeft": string;
        "iconRight": string;
        "inputId": string;
        "labelText": string;
        "max": number;
        "maxLength": number;
        "min": number;
        "minLength": number;
        "name": any;
        "placeholder": any;
        "required": boolean;
        "step"?: number | 'any';
        "type": 'text' | 'password' | 'number';
    }
    interface SiclRadio {
        "checked": boolean;
        "disabled": boolean;
        "emitCheckedChange": () => Promise<void>;
        "formAssociated": boolean;
        "guid": string;
        "inputId": string;
        "labelText"?: string;
        "name": string;
        "required": boolean;
        "value": string;
    }
    interface SiclRadioGroup {
        "disabled": boolean;
        "labelText": string;
        "name": string;
        "required": boolean;
    }
    interface SiclToast {
        "active": false;
        "dismissDuration": string;
        "label": string;
        "type": 'primary' | 'danger' | 'warning' | 'success';
    }
}
export interface SiclCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSiclCheckboxElement;
}
export interface SiclRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSiclRadioElement;
}
export interface SiclRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSiclRadioGroupElement;
}
export interface SiclToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSiclToastElement;
}
declare global {
    interface HTMLSiclButtonElement extends Components.SiclButton, HTMLStencilElement {
    }
    var HTMLSiclButtonElement: {
        prototype: HTMLSiclButtonElement;
        new (): HTMLSiclButtonElement;
    };
    interface HTMLSiclCheckboxElement extends Components.SiclCheckbox, HTMLStencilElement {
    }
    var HTMLSiclCheckboxElement: {
        prototype: HTMLSiclCheckboxElement;
        new (): HTMLSiclCheckboxElement;
    };
    interface HTMLSiclCheckboxGroupElement extends Components.SiclCheckboxGroup, HTMLStencilElement {
    }
    var HTMLSiclCheckboxGroupElement: {
        prototype: HTMLSiclCheckboxGroupElement;
        new (): HTMLSiclCheckboxGroupElement;
    };
    interface HTMLSiclIconElement extends Components.SiclIcon, HTMLStencilElement {
    }
    var HTMLSiclIconElement: {
        prototype: HTMLSiclIconElement;
        new (): HTMLSiclIconElement;
    };
    interface HTMLSiclInputElement extends Components.SiclInput, HTMLStencilElement {
    }
    var HTMLSiclInputElement: {
        prototype: HTMLSiclInputElement;
        new (): HTMLSiclInputElement;
    };
    interface HTMLSiclRadioElement extends Components.SiclRadio, HTMLStencilElement {
    }
    var HTMLSiclRadioElement: {
        prototype: HTMLSiclRadioElement;
        new (): HTMLSiclRadioElement;
    };
    interface HTMLSiclRadioGroupElement extends Components.SiclRadioGroup, HTMLStencilElement {
    }
    var HTMLSiclRadioGroupElement: {
        prototype: HTMLSiclRadioGroupElement;
        new (): HTMLSiclRadioGroupElement;
    };
    interface HTMLSiclToastElement extends Components.SiclToast, HTMLStencilElement {
    }
    var HTMLSiclToastElement: {
        prototype: HTMLSiclToastElement;
        new (): HTMLSiclToastElement;
    };
    interface HTMLElementTagNameMap {
        "sicl-button": HTMLSiclButtonElement;
        "sicl-checkbox": HTMLSiclCheckboxElement;
        "sicl-checkbox-group": HTMLSiclCheckboxGroupElement;
        "sicl-icon": HTMLSiclIconElement;
        "sicl-input": HTMLSiclInputElement;
        "sicl-radio": HTMLSiclRadioElement;
        "sicl-radio-group": HTMLSiclRadioGroupElement;
        "sicl-toast": HTMLSiclToastElement;
    }
}
declare namespace LocalJSX {
    interface SiclButton {
        "disabled"?: boolean;
        "form"?: string;
        "iconLeft"?: string;
        "iconRight"?: string;
        "name"?: string;
        "type"?: string;
        "variant"?: 'primary' | 'secondary' | 'tertiary' | 'danger';
    }
    interface SiclCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
        "formAssociated"?: boolean;
        "indeterminate"?: boolean;
        "inputId"?: string;
        "labelText"?: string;
        "name"?: string;
        "onSiclCheckboxChange"?: (event: SiclCheckboxCustomEvent<any>) => void;
        "required"?: boolean;
        "value"?: string;
    }
    interface SiclCheckboxGroup {
        "disabled"?: boolean;
        "labelText": string;
        "name": string;
        "value"?: string;
    }
    interface SiclIcon {
        "name"?: string;
        "size"?: string | '1em';
    }
    interface SiclInput {
        "disabled"?: boolean;
        "formAssociated"?: boolean;
        "iconLeft"?: string;
        "iconRight"?: string;
        "inputId"?: string;
        "labelText"?: string;
        "max"?: number;
        "maxLength"?: number;
        "min"?: number;
        "minLength"?: number;
        "name"?: any;
        "placeholder"?: any;
        "required"?: boolean;
        "step"?: number | 'any';
        "type"?: 'text' | 'password' | 'number';
    }
    interface SiclRadio {
        "checked"?: boolean;
        "disabled"?: boolean;
        "formAssociated"?: boolean;
        "guid"?: string;
        "inputId"?: string;
        "labelText"?: string;
        "name"?: string;
        "onSiclInternalRadioCheckedChange"?: (event: SiclRadioCustomEvent<any>) => void;
        "onSiclRadioChange"?: (event: SiclRadioCustomEvent<any>) => void;
        "required"?: boolean;
        "value"?: string;
    }
    interface SiclRadioGroup {
        "disabled"?: boolean;
        "labelText": string;
        "name": string;
        "onSiclRadioGroupChange"?: (event: SiclRadioGroupCustomEvent<any>) => void;
        "required"?: boolean;
    }
    interface SiclToast {
        "active"?: false;
        "dismissDuration"?: string;
        "label": string;
        "onSiclToastHide"?: (event: SiclToastCustomEvent<any>) => void;
        "onSiclToastRegister"?: (event: SiclToastCustomEvent<any>) => void;
        "onSiclToastShow"?: (event: SiclToastCustomEvent<any>) => void;
        "onSiclToastSync"?: (event: SiclToastCustomEvent<any>) => void;
        "type"?: 'primary' | 'danger' | 'warning' | 'success';
    }
    interface IntrinsicElements {
        "sicl-button": SiclButton;
        "sicl-checkbox": SiclCheckbox;
        "sicl-checkbox-group": SiclCheckboxGroup;
        "sicl-icon": SiclIcon;
        "sicl-input": SiclInput;
        "sicl-radio": SiclRadio;
        "sicl-radio-group": SiclRadioGroup;
        "sicl-toast": SiclToast;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sicl-button": LocalJSX.SiclButton & JSXBase.HTMLAttributes<HTMLSiclButtonElement>;
            "sicl-checkbox": LocalJSX.SiclCheckbox & JSXBase.HTMLAttributes<HTMLSiclCheckboxElement>;
            "sicl-checkbox-group": LocalJSX.SiclCheckboxGroup & JSXBase.HTMLAttributes<HTMLSiclCheckboxGroupElement>;
            "sicl-icon": LocalJSX.SiclIcon & JSXBase.HTMLAttributes<HTMLSiclIconElement>;
            "sicl-input": LocalJSX.SiclInput & JSXBase.HTMLAttributes<HTMLSiclInputElement>;
            "sicl-radio": LocalJSX.SiclRadio & JSXBase.HTMLAttributes<HTMLSiclRadioElement>;
            "sicl-radio-group": LocalJSX.SiclRadioGroup & JSXBase.HTMLAttributes<HTMLSiclRadioGroupElement>;
            "sicl-toast": LocalJSX.SiclToast & JSXBase.HTMLAttributes<HTMLSiclToastElement>;
        }
    }
}
